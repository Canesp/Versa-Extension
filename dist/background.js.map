{"version":3,"file":"background.js","mappingsnIA;AACA;AACA;AACA;AACA","sources":["webpack://Versa-Extension/./src/background/background.ts","webpack://Versa-Extension/webpack/before-startup","webpack://Versa-Extension/webpack/startup","webpack://Versa-Extension/webpack/after-startup"],"sourcesContent":["// Event listener for the browser action (extension icon) click event.\n/* chrome.action.onClicked.addListener((tab) => {\n    chrome.tabs.query({ active: true, currentWindow: true }, (tabs) => {\n        chrome.tabs.sendMessage(tabs[0].id, { action: \"togglePopup\" });\n    });\n}); */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nconst base_API = \"https://api.frankfurter.app/\";\nconst fetchCurrencies = () => __awaiter(this, void 0, void 0, function* () {\n    const response = yield fetch(`${base_API}currencies`);\n    const data = yield response.json();\n    console.log(\"Currencies fetched: \", data);\n    return data;\n});\nconst fetchRates = () => __awaiter(this, void 0, void 0, function* () {\n    const response = yield fetch(`${base_API}latest`);\n    const data = yield response.json();\n    console.log(\"Rates fetched: \", data);\n    return data;\n});\nconst fetchHistoricalRates = () => __awaiter(this, void 0, void 0, function* () {\n    const oneYearAgo = new Date();\n    oneYearAgo.setFullYear(oneYearAgo.getFullYear() - 1);\n    const formattedDate = oneYearAgo.toISOString().split('T')[0];\n    const response = yield fetch(`${base_API}${formattedDate}..`); // will fetch the rates from a year ago to the current date.\n    const data = yield response.json();\n    console.log(\"Historical rates fetched: \", data);\n    return data;\n});\n// Storing the currencies and rates in the local storage.\nconst storeCurrencies = (currencies) => {\n    chrome.storage.local.set({ currencies: currencies }, () => {\n        console.log(\"Currencies stored in the local storage.\");\n    });\n};\nconst storeRates = (rates) => {\n    const timestamp = Date.now();\n    chrome.storage.local.set({ rates: rates, lastFetch: timestamp }, () => {\n        console.log(\"Rates stored in the local storage.\");\n    });\n};\nconst storeHistoricalRates = (historicalRates) => {\n    chrome.storage.local.set({ historicalRates: historicalRates }, () => {\n        console.log(\"Historical rates stored in the local storage.\");\n    });\n};\nconst storeDefaultCurrencies = () => {\n    const defaultCurrencies = {\n        \"from\": \"EUR\",\n        \"to\": \"USD\"\n    };\n    chrome.storage.local.set({ lastChosenCurrencies: defaultCurrencies }, () => {\n        console.log(\"Default currencies stored in the local storage.\");\n    });\n};\n// Alarms for fetching the currencies and rates every 24 hours at around 16 CET (Central European Time).\nconst setAlarms = () => {\n    const now = new Date();\n    const currentUtc = now.getTime() + now.getTimezoneOffset() * 60000;\n    const cetOffset = (now.getTimezoneOffset() / 60 === -1 ? 60 : 120) * 60000;\n    const primaryFetchTime = new Date(currentUtc + cetOffset);\n    primaryFetchTime.setHours(15, 15, 0, 0);\n    const fallbackFetchTime = new Date(currentUtc + cetOffset);\n    fallbackFetchTime.setHours(16, 0, 0, 0);\n    if (primaryFetchTime.getTime() <= currentUtc) {\n        primaryFetchTime.setUTCDate(primaryFetchTime.getUTCDate() + 1);\n    }\n    if (fallbackFetchTime.getTime() <= currentUtc) {\n        fallbackFetchTime.setUTCDate(fallbackFetchTime.getUTCDate() + 1);\n    }\n    const timeUntilPrimaryFetch = primaryFetchTime.getTime() - currentUtc;\n    const timeUntilFallbackFetch = fallbackFetchTime.getTime() - currentUtc;\n    chrome.alarms.create(\"primaryFetch\", { when: Date.now() + timeUntilPrimaryFetch });\n    chrome.alarms.create(\"fallbackFetch\", { when: Date.now() + timeUntilFallbackFetch });\n    console.log(\"Alarms set for fetching rates. Primary fetch at: \", primaryFetchTime, \"Fallback fetch at: \", fallbackFetchTime, \"Current time: \", now);\n};\nconst checkIfUpToDate = () => __awaiter(this, void 0, void 0, function* () {\n    const oneDayInMs = 86400000;\n    const now = Date.now();\n    chrome.storage.local.get([\"lastFetch\", \"currencies\", \"rates\", \"historicalRates\"], (result) => {\n        const lastFetch = result.lastFetch;\n        if (!lastFetch || now - lastFetch > oneDayInMs) {\n            fetchRates().then(storeRates).catch(console.error);\n        }\n        else {\n            console.log(\"Rates are up to date.\");\n        }\n        const currencies = result.currencies;\n        const rates = result.rates;\n        // If a new currency is added, fetch the currencies again (+1 because the base currency is not included in the currencies object).\n        if (!currencies || Object.keys(currencies).length != Object.keys(rates.rates).length + 1) {\n            fetchCurrencies().then(storeCurrencies).catch(console.error);\n        }\n        else {\n            console.log(\"Currencies are up to date.\");\n            console.log(\"Currencies: \", currencies);\n        }\n        const historicalRates = result.historicalRates;\n        if (!historicalRates || now - lastFetch > oneDayInMs) {\n            fetchHistoricalRates().then(storeHistoricalRates).catch(console.error);\n        }\n        else {\n            console.log(\"Historical rates are up to date.\");\n        }\n    });\n});\n// Event listener for the alarms.\nchrome.alarms.onAlarm.addListener((alarm) => {\n    if (alarm.name === \"primaryFetch\" || alarm.name === \"fallbackFetch\") {\n        fetchRates().then(storeRates).catch(console.error);\n        setAlarms();\n    }\n});\n// Event listener for the installation of the extension.\nchrome.runtime.onInstalled.addListener(() => {\n    storeDefaultCurrencies();\n    checkIfUpToDate();\n    setAlarms();\n});\n// Event listener for Startup.\nchrome.runtime.onStartup.addListener(() => {\n    checkIfUpToDate();\n    setAlarms();\n});\n","","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = {};\n__webpack_modules__[\"./src/background/background.ts\"]();\n",""],"names":[],"sourceRoot":""}